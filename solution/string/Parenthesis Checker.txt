						Parenthesis Checker
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Given an expression string x. Examine whether the pairs and the orders of “{“,”}”,”(“,”)”,”[“,”]” are correct in exp.
For example, the function should return 'true' for exp = “[()]{}{[()()]()}” and 'false' for exp = “[(])”.

Example 1:

Input:
{([])}
Output: 
true
Explanation: 
{ ( [ ] ) }. Same colored brackets can form 
balaced pairs, with 0 number of 
unbalanced bracket.
Example 2:

Input: 
()
Output: 
true
Explanation: 
(). Same bracket can form balanced pairs, 
and here only 1 type of bracket is 
present and in balanced way.
Example 3:

Input: 
([]
Output: 
false
Explanation: 
([]. Here square bracket is balanced but 
the small bracket is not balanced and 
Hence , the output will be unbalanced.
Your Task:
This is a function problem. You only need to complete the function ispar() that takes a string as a parameter and returns a boolean value true if brackets are balanced else returns false. The printing is done automatically by the driver code.

Expected Time Complexity: O(|x|)
Expected Auixilliary Space: O(|x|)
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
link-->https://practice.geeksforgeeks.org/problems/parenthesis-checker2744/1
youtube-->>https://www.youtube.com/watch?v=LBqxXTIfCVo
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#include <bits/stdc++.h>
using namespace std;
int main()
{
    string str={'{','(','[','}',')','}'};
    int len=str.length();
    int flag=0;
    char a;
    stack <char> s;
    if(len%2!=0)    flag=1;
    else{
        for(int i=0;i<len;i++){
            if(str[i]=='{' ||str[i]=='[' ||str[i]=='(' ){
                s.push(str[i]);
                continue;
            }
            if(s.empty())   flag=1;
            switch(str[i]){
                case ']': a =s.top();
                        s.pop();
                        if(a=='{' || a=='(')
                            flag=1;
                        break;

                case '}': 
                         a =s.top();
                        s.pop();
                        if(a=='[' || a=='(')
                            flag=1;
                        break;
                case ')': 
                         a =s.top();
                        s.pop();
                        if(a=='{' || a=='[')
                            flag=1;
                        break;
            }


         }  
    } 
    if(flag!=0)     cout<<"false";
    else        cout<<"true"; 
    return 0;
}
