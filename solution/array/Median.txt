						Median  && Merging two sorted array
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Given an array arr[] of N integers, calculate the median
 

Example 1:

Input: N = 5
arr[] = 90 100 78 89 67
Output: 89
Explanation: After sorting the array 
middle element is the median 

Example 2:

Input: N = 4
arr[] = 56 67 30 79
Output: 61
Explanation: In case of even number of 
elemebts average of two middle elements 
is the median

 

Your Task:
You don't need to read or print anything. Your task is to complete the function find_median() which takes the array as input parameter and returns the floor value of the median.
 

Expected Time Complexity: O(n * log(n))
Expected Space Complexity: O(1)
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
link-->https://practice.geeksforgeeks.org/problems/find-the-median0527/1
merging the array-->>https://www.geeksforgeeks.org/efficiently-merging-two-sorted-arrays-with-o1-extra-space/
youtub-->>https://www.youtube.com/watch?v=2JzRBPFYbKE&t=16s
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#include<bits/stdc++.h>
using namespace std;

int median(int arr[],int len){
    int ans;
    if(len%2==0){
        len=len/2;
        ans=(arr[len]+arr[len-1])/2;
        return ans;
    }
    else{
        len=len/2;
        return arr[len];
    }

}
int main(){
    int arr[]={90,100,78,89,67};
    int len=sizeof(arr)/sizeof(arr[0]);
    sort(arr,arr+len);
    cout<<median(arr,len);
 }  

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
							DONE BY ME
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#include<bits/stdc++.h>
using namespace std;

int main(){
    int arr1[]={3,6,4,33,23,14,11};
    int arr2[]={2,66,22,88,12};
    int len1=sizeof(arr1)/sizeof(arr1[0]);
    int len2=sizeof(arr2)/sizeof(arr2[0]);
    // cout<<median(arr,len);
    int gap;
    if((len1+len2)%2==0){
        gap=(len1+len2)/2;
    }
    else{
        gap=((len1+len2)/2)+1;

    }
    // if(gap%2==1)    gap+=1;
    cout<<gap<<len1;
    // int h1=0,l1=0;
    while(gap>=1){
        if(gap==3)    gap=gap+1;
        int l=0,h=gap,h1=0,l1=0;
        for(int i=0;i<len1+len2;i++){
            if(h>=len1 && l<=len1){
                // if(h==len1+1) h=0;
                cout<<"in 1"<<"\n";
                if(h1>=len2 ){
                    cout<<"brak"<<"-->"<<h1<<"\n";
                    break;
                }
                if(gap>=len1 && h1==0){
                    h1=(gap-(len1-1));
                    cout<<h1<<gap<<len1-1;
                }

                if(arr1[l]>arr2[h1])    swap(arr1[l],arr2[h1]);
                
                h1++;
             }
            else if(l>=len1 && h>=len1 ){
                // if(l1==len1+1) l=0;
                cout<<"in 2"<<"\n";
                if(h1>=len2){
                    cout<<"brak"<<"-->"<<h1<<"\n";
                    // cout<<"brak";
                    break;
                }
                 
                if(arr2[l1]>arr2[h1])     swap(arr2[l1],arr2[h1]);
                
                l1++;
                h1++;
            }
            else if(l<len1 && h<len1){
                if(arr1[l]>arr1[h]){
                    swap(arr1[l],arr1[h]);
                }
            }
            cout<<"l-->"<<l<<"\n";
            cout<<"h-->"<<h<<"\n";
            cout<<"l1-->"<<l1<<"\n";
            cout<<"h1-->"<<h1<<"\n";
            l++;
            h++;
        }
        
        
        gap/=2;
        cout<<"gap-->"<<gap<<"\n";
        // gap/=2;
    }
    for(int i=0;i<len1;i++){
        cout<<arr1[i]<<" ";
    }
    cout<<"\n";
    for(int i=0;i<len2;i++){
        cout<<arr2[i]<<" ";
    }
 }   

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
							SOLVED ON INTERNET
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Merging two sorted arrays with O(1)
// extra space
#include <bits/stdc++.h>
using namespace std;

// Function to find next gap.
int nextGap(int gap)
{
	if (gap <= 1)
		return 0;
	return (gap / 2) + (gap % 2);
}

void merge(int* arr1, int* arr2, int n, int m)
{
	int i, j, gap = n + m;
	for (gap = nextGap(gap);
		gap > 0; gap = nextGap(gap))
	{
		// comparing elements in the first array.
		for (i = 0; i + gap < n; i++)
			if (arr1[i] > arr1[i + gap])
				swap(arr1[i], arr1[i + gap]);

		// comparing elements in both arrays.
		for (j = gap > n ? gap - n : 0;
			i < n && j < m;
			i++, j++)
			if (arr1[i] > arr2[j])
				swap(arr1[i], arr2[j]);

		if (j < m) {
			// comparing elements in the second array.
			for (j = 0; j + gap < m; j++)
				if (arr2[j] > arr2[j + gap])
					swap(arr2[j], arr2[j + gap]);
		}
	}
}

// Driver code
int main()
{
	int a1[] = { 10, 27, 38, 43, 82 };
	int a2[] = { 3, 9 };
	int n = sizeof(a1) / sizeof(int);
	int m = sizeof(a2) / sizeof(int);

	// Function Call
	merge(a1, a2, n, m);

	printf("First Array: ");
	for (int i = 0; i < n; i++)
		printf("%d ", a1[i]);

	printf("\nSecond Array: ");
	for (int i = 0; i < m; i++)
		printf("%d ", a2[i]);
	printf("\n");
	return 0;
}
