
						Triplet Sum in Array 
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Example 1:

Input:
n = 6, X = 13
arr[] = [1 4 45 6 10 8]
Output:
1
Explanation:
The triplet {1, 4, 8} in 
the array sums up to 13.
Example 2:

Input:
n = 5, X = 10
arr[] = [1 2 4 3 6]
Output:
1
Explanation:
The triplet {1, 3, 6} in 
the array sums up to 10.

Expected Time Complexity: O(n2)
Expected Auxiliary Space: O(n)

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
youtube-->>https://www.youtube.com/watch?v=PiId4tgzcho
link-->https://practice.geeksforgeeks.org/problems/triplet-sum-in-array-1587115621/1
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

in this program i used hash table soo i need more space ................................
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#include<bits/stdc++.h>
using namespace std;
int sumOfTriplet(int arr1[],int len1,int num){
    unordered_map<int,int> map;
    int flag=0;
    for(int i=0;i<len1;i++){
        map[arr1[i]]++;
    }
    int a,b;
    for(int i=0;i<len1;i++){
        map[arr1[i]]--;
        for(int j=i+1;j<len1;j++){
            map[arr1[j]]--;
            if(map[num-(arr1[i]+arr1[j])]==1){
                // cout<<"yes";
                // cout<<"j-->>"<<j<<" ";
                cout<<arr1[i]<<" "<<arr1[j]<<" "<<num-(arr1[i]+arr1[j])<<"="
                <<arr1[i]+arr1[j]+num-(arr1[i]+arr1[j])<<"\n";

                flag=1;
            }
            map[arr1[j]]++;
        }
        map[arr1[i]]++;
    }
    if(flag==0) cout<<"not possible";
}
int main(){
    int arr1[]={1, 4, 45, 6 ,10, 8};
    int k=13;
    int len1=sizeof(arr1)/sizeof(arr1[0]);
    sumOfTriplet(arr1,len1,k);

 }   


-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Expected Time Complexity: O(n2)
Expected Auxiliary Space: O(1)
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
in this program first i did sorting ...then i did with two pointer approach....soo space -->O(1)
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#include<bits/stdc++.h>
using namespace std;
void sumOfTriplet(int arr1[],int len1,int num){
    int left=0,right=len1-1,flag=0;
    sort(arr1,arr1+len1);
    for(int i=0;i<len1;i++){
        left=i+1;
        for(int j=i+1;j<len1;j++){
            if(arr1[left]+arr1[right]+arr1[i]==num){
                cout<<"yes";
                cout<<arr1[left]<<" "<<arr1[right]<<" "<<arr1[i];
                // flag=1;
                break;
            }else if(arr1[left]+arr1[right]+arr1[i]<num)    left++;
             else  right--;  
        }
        // if(flag==1)     break;
    }
}
int main(){
    int arr1[]={1,4,45,6,10,8};
    int k=13;
    int len1=sizeof(arr1)/sizeof(arr1[0]);
    sumOfTriplet(arr1,len1,k);

 }  