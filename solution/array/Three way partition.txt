							Three way partition 
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Example 1:

Input: 
n = 5
A[] = {1, 2, 3, 3, 4}
[a, b] = [1, 2]
Output: 1
Explanation: One possible arrangement is:
{1, 2, 3, 3, 4}. If you return a valid
arrangement, output will be 1.


Example 2:

Input: 
n = 3 
A[] = {1, 2, 3}
[a, b] = [1, 3]
Output: 1
Explanation: One possible arrangement 
is: {1, 2, 3}. If you return a valid
arrangement, output will be 1.

Example 3:
Input: 
n = 
A[] = {2,5,4,1,7}
[a, b] = [3,5]
Output: 1
array -->2 1 4 5 7 

Expected Time Complexity: O(n)
Expected Auxiliary Space: O(1)

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
youtube-->>https://www.youtube.com/watch?v=X-QBizYNGYM
link-->>https://practice.geeksforgeeks.org/problems/three-way-partitioning/1
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#include<bits/stdc++.h>
using namespace std;

int partitioning(int arr[],int len,int a,int b){
    int l=0,h=len-1;
    for(int i=0;i<len;i++){
        if(arr[i]<a){
            swap(arr[i],arr[l]);
            l++;
        }else if(arr[i]>b){
            swap(arr[i],arr[h]);
            h--;
        }
    }
    for(int i=0;i<len;i++){
        cout<<arr[i]<<" ";
    }
}
int main(){
    int arr[]={2,5,4,1,7};
    int a=3,b=5;
    int len=sizeof(arr)/sizeof(arr[0]);
    partitioning(arr,len,a,b);

 }   